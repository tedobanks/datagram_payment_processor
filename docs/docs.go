// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/databytes/purchase": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Purchase databytes using the authenticated user's datacredit balance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Databytes"
                ],
                "summary": "Purchase Databytes",
                "parameters": [
                    {
                        "description": "Purchase details including databyte_amount",
                        "name": "purchaseRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DatabytePurchaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated wallet information after the purchase",
                        "schema": {
                            "$ref": "#/definitions/models.Wallet"
                        }
                    },
                    "400": {
                        "description": "Invalid input, insufficient datacredits, or positive databyte amount required",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or UserID mismatch",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during databyte purchase",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/initialize": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start a new Paystack payment transaction to purchase datacredits. User must be authenticated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Initialize Payment for Datacredit",
                "parameters": [
                    {
                        "description": "Payment details including email and amount in kobo",
                        "name": "paymentRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PaystackInitializeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns message, authorization_url, access_code, and reference from Paystack",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during payment initialization",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable: Error from Paystack",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/withdraw": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initiate a withdrawal of datacredit for an authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Initiate Datacredit Withdrawal",
                "parameters": [
                    {
                        "description": "Withdrawal details including amount in kobo",
                        "name": "withdrawalRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.WithdrawalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message, transfer_code",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or insufficient datacredit balance",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or UserID mismatch",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during withdrawal initiation",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable: Error from Paystack during withdrawal",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/webhooks/paystack": {
            "post": {
                "description": "Endpoint for Paystack to send asynchronous payment and transfer notifications. Signature is verified.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Handle Paystack Webhook Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Paystack signature for webhook verification",
                        "name": "X-Paystack-Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Raw Paystack Webhook Event Payload",
                        "name": "webhookEvent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PaystackWebhookPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "status: 'Webhook processed'",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload or missing signature",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Webhook signature verification failed",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error processing webhook",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.DatabytePurchaseRequest": {
            "type": "object",
            "required": [
                "databyte_amount",
                "user_id"
            ],
            "properties": {
                "databyte_amount": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.PaystackInitializeRequest": {
            "type": "object",
            "required": [
                "amount",
                "email"
            ],
            "properties": {
                "amount": {
                    "description": "Amount in kobo (for datacredit purchase)",
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "models.PaystackWebhookPayload": {
            "type": "object",
            "properties": {
                "data": {},
                "event": {
                    "type": "string"
                }
            }
        },
        "models.Wallet": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "databyte_balance": {
                    "type": "integer"
                },
                "datacredit_balance": {
                    "description": "Represents NGN value in kobo",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "(FK to profiles.id or auth.users.id)",
                    "type": "string"
                }
            }
        },
        "models.WithdrawalRequest": {
            "type": "object",
            "required": [
                "amount",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "description": "Amount of datacredit (kobo) to withdraw",
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "The error message string",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Datagram Payment Processor API",
	Description:      "Backend API for handling Paystack payments, user credits, and databyte conversions.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
